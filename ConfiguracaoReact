Na integra√ß√£o como a constru√ß√£o de uma ponte:
O Lado Java (Sua Base - J√° est√° pronta! ‚úÖ): Ao criar a classe WebConfig, voc√™ construiu a "metade da ponte" do lado do servidor. Voc√™ abriu a porta e disse: "Estou pronto e ouvindo. Eu permito que o site em http://localhost:3000 converse comigo". Seus controllers (UsuarioController, RestauranteController) s√£o os destinos para onde essa ponte levar√°.
O Lado React (Seu Pr√≥ximo Passo - A√ß√£o Necess√°ria! üë®‚Äçüíª): Agora, voc√™ precisa construir a "outra metade da ponte" do lado do cliente. O React n√£o sabe magicamente que seu back-end existe em http://localhost:8080. Voc√™ precisa configurar e escrever o c√≥digo no React para que ele saiba como e para onde enviar as requisi√ß√µes.
Exatamente, agora voc√™ precisa configurar o React.
"Configurar o React" nesse contexto n√£o significa mexer em arquivos de configura√ß√£o complexos. Significa principalmente estruturar seu c√≥digo para fazer as chamadas de API de forma limpa e centralizada.
Aqui est√° o checklist pr√°tico de como fazer isso:
Passo 1: Instalar o Axios (Recomendado)
Axios √© uma biblioteca que simplifica muito as chamadas HTTP (melhor que o fetch nativo para a maioria dos casos de uso de APIs). No terminal, dentro da pasta do seu projeto React, rode:
code
Bash
npm install axios
Passo 2: Criar um "Cliente de API" Centralizado
Esta √© a configura√ß√£o mais importante que voc√™ far√° no React. Em vez de escrever a URL completa do seu back-end em todos os componentes, voc√™ a define em um √∫nico lugar.
Crie um novo arquivo, por exemplo: src/services/api.js
code
JavaScript
// src/services/api.js

import axios from 'axios';

const apiClient = axios.create({
  // ESTA √â A CONFIGURA√á√ÉO PRINCIPAL:
  // Aponta para a base da sua API Java no Spring Boot.
  baseURL: 'http://localhost:8080/api', 
  
  // Voc√™ tamb√©m pode definir cabe√ßalhos padr√£o aqui, se necess√°rio
  headers: {
    'Content-Type': 'application/json'
  }
});

export default apiClient;
An√°lise deste arquivo:
baseURL: 'http://localhost:8080/api': Esta linha √© a "m√°gica". Agora, toda vez que voc√™ usar apiClient, ele j√° saber√° que o destino √© o seu servidor Java. Note que inclu√≠mos o prefixo /api que definimos nas rotas do Spring.
Passo 3: Usar o Cliente de API nos seus Componentes
Agora, em vez de usar axios.get('http://localhost:8080/api/usuarios'), voc√™ simplesmente importa seu cliente e usa a rota relativa.
Veja como ficaria um componente que consome seu UsuarioController:
code
Jsx
// src/pages/UsuariosPage.js

import React, { useState, useEffect } from 'react';
import apiClient from '../services/api'; // <-- 1. Importe seu cliente de API

function UsuariosPage() {
  const [usuarios, setUsuarios] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Fun√ß√£o para buscar os usu√°rios
    const fetchUsuarios = async () => {
      try {
        // 2. Use o apiClient para chamar a rota relativa
        // Ele vai automaticamente fazer a chamada para: http://localhost:8080/api/usuarios
        const response = await apiClient.get('/usuarios'); 
        setUsuarios(response.data);
      } catch (error) {
        console.error("Erro ao buscar usu√°rios:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchUsuarios();
  }, []); // O array vazio [] faz com que isso rode apenas uma vez, quando o componente √© montado

  if (loading) {
    return <p>Carregando usu√°rios...</p>;
  }

  return (
    <div>
      <h1>Lista de Usu√°rios</h1>
      <ul>
        {usuarios.map(usuario => (
          <li key={usuario.id}>{usuario.nome} - {usuario.email}</li>
        ))}
      </ul>
    </div>
  );
}

export default UsuariosPage;
Resumo do Fluxo
React: O componente UsuariosPage √© renderizado.
React: O useEffect chama a fun√ß√£o fetchUsuarios.
React (Axios): apiClient.get('/usuarios') envia uma requisi√ß√£o GET para http://localhost:8080/api/usuarios.
Java (Spring): A classe WebConfig v√™ a requisi√ß√£o vinda de localhost:3000 (onde o React roda) e a permite.
Java (Spring): A requisi√ß√£o chega ao m√©todo listar() do seu UsuarioController.
Java (Spring): O controller processa a l√≥gica e retorna a lista de usu√°rios em formato JSON.
React: O axios recebe a resposta e a fetchUsuarios atualiza o estado usuarios com os dados recebidos.
React: O componente √© re-renderizado para mostrar a lista de usu√°rios na tela.
